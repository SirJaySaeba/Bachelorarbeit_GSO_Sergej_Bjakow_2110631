<!DOCTYPE html>
<html lang="en"><head><script type="text/javascript" async="" src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/quant.js"></script><script src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/ga.js" async="" type="text/javascript"></script><script>var __pbpa = true;</script><script>var translated_warning_string = 'Warning: Never enter your Tumblr password unless \u201chttps://www.tumblr.com/login\u201d\x0ais the address in your web browser.\x0a\x0aYou should also see a green \u201cTumblr, Inc.\u201d identification in the address bar.\x0a\x0aSpammers and other bad guys use fake forms to steal passwords.\x0a\x0aTumblr will never ask you to log in from a user\u2019s blog.\x0a\x0aAre you absolutely sure you want to continue?';</script><script type="text/javascript" language="javascript" src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/pre_tumblelog.js"></script>


  
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>eighty-blog — Creating an Ajaxified Star Rating System in Rails 3</title>
		<meta name="description" content="Creating an Ajaxified Star Rating System in Rails 3 On the app I’m currently working on I needed to create a star rating system. I searched around for different solutions, but everything I found...">
    <meta name="text:Disqus Shortname" content="">
    <link rel="icon" href="http://25.media.tumblr.com/avatar_664924eff237_128.png">
    <link rel="alternate" type="application/rss+xml" title="RSS" href="http://eighty-b.tumblr.com/rss">

		<!-- Default colours -->
		<meta name="color:Top Border" content="#333">
		<meta name="color:Site Title" content="#D53C2E">
		<meta name="color:Link" content="#333">
		<meta name="color:Link Hover" content="#D53C2E">
		<meta name="color:Button" content="#bbbbbb">
		<meta name="color:Button Hover" content="#D53C2E">
		<meta name="color:Post Title" content="#333">
		<meta name="color:Post Title Link" content="#D53C2E">
		
		<!-- Default social link text -->
		<meta name="text:Website Address" content="">
		<meta name="text:Blog Address" content="">
		<meta name="text:Flickr Username" content="">
		<meta name="text:Twitter Username" content="">
		<meta name="text:Facebook Username" content="">
		<meta name="text:YouTube Username" content="">
		<meta name="text:Lastfm Username" content="">
		<meta name="text:Delicious Username" content="">
		<meta name="text:FriendFeed Username" content="">
		
		<!-- Google Analytics -->
		<meta name="text:Google Analytics ID" content="">
    
		<!-- Vignelli v1.3.3 -->

    <style type="text/css">

			/*
			-----------------------------------------------
			Form styles
			-----------------------------------------------
			*/

			form {
				font-size: 100%;
				position: relative;
				text-align: left;
			}
			form fieldset {
				margin: 0;
				padding: 0;
				width: 100%;
			}
			form fieldset legend {
				border: 0;
				border-bottom: 1px solid #ccc;
				float: left;
				font-size: 150%;
				font-weight: bold;
				margin: 0 0 15px;
				*margin-left: -7px;
				padding: 0 0 3px;
				white-space: normal;
			}
			legend span {
				display: block;
				width: 461px;
			}
			.field label,
			.field .label,
			form label {
				float: left;
				margin-right: 1em;
				width: 12em;
			}

			.introduction {
				font-size: 110%;
				padding-bottom: 1.5em;
			}

			.field {
				clear: left;
				margin: 0.75em 0;
				padding: 0.2em;
			}
			.text input,
			.textarea textarea,
			.password input,
			.email input,
			.url input,
			.decimal input,
			.integer input,
			.select input,
			input[type="text"],
			input[type="textarea"] {
				border: 1px solid #999;
				color: #333;
				font-size: 100%;
				height: 1.2em;
				padding: 0.15em;
			}
			.decimal input,
			.integer input {
				width: 4em;
			}
			.textarea textarea,
			input[type="textarea"] {
				height: 7.5em;
				width: 24em;
			}
			form .field input,
			form .textarea textarea,
			form .select select,
			input[type="text"],
			input[type="textarea"] {
				background: #fff url(../images/core/forms_fieldbg.gif) repeat-x 0 0;
				border-bottom: 1px solid #dadada;
				border-left: 1px solid #b4b4b4;
				border-right: 1px solid #b4b4b4;
				border-top: 1px solid #727272;
				font-size: 100%;
				padding: 3px;
				width: 50%;
			}
			form .select select,
			select{
				padding: 2px;
				width: auto;
			}
			form .postcode input {
				width: 20%;
			}
			form .telephone input,
			form .mobile input,
			form .fax input {
				width: 30%;
			}
			form .help {
				color: #888;
				font-size: 0.8em;
				line-height: 1.8em;
				margin-left: 16.25em;
				padding-bottom: 0;
			}
			.field.required .required,
			.introduction .required {
				color: #c12;
			}
			.field .optional,
			.introduction .optional {
				color: #888;
			}
			.field.error input,
			.select.error select,
			.textarea.error textarea {
				background: #FFF1ED;
				border: 2px solid #ED2F07;
			}
			form .required label span,
			.required_info span {
				color: #cc0000;
				font-size: 1.143em;
				font-weight: bold;
				line-height: 120%;
			}
			.errors {
				color: #E9602A;
				font-weight: bold;
			}
			.error_summary {
				background: #FFEBEB;
				border: 1px solid #FFCCCC;
				color: #b12;
				margin-left: -1px;
				margin-top: -2px;
				padding: 0.375em;
			}
			.error_summary p {
				padding: 0;
			}
			.field.error .errors {
				color: #b12;
				margin-left: 13em;
			}
			.error_summary li {
				list-style: disc;
				margin-left: 2em;
			}
			.required_info {
				color: #666;
				font-size: 0.929em;
				padding-left: 10px;
				position: absolute;
				right: 0;
				text-align: right;
				top: 0;
			}
			.date_dropdowns,
			.date_dropdowns div {
				float: left;
			}
			.date_dropdowns div label {
				color: #888;
				font-size: 0.8em;
				line-height: 1.8em;
			}
			.date_dropdowns .day {
				width: 4em;
			}
			.date_dropdowns .month {
				width: 4em;
			}
			.date_dropdowns .year {
				width: 4em;
			}

			.checkboxes_widget,
			.radios_widget,
			.boolean_widget {
				margin-left: 13em;
			}
			.checkboxes_widget li label,
			.radios_widget li label {
				float: none;
			}
			.boolean_widget li label {
				width: 5em;
			}
			.checkboxes_widget li label input,
			.radios_widget li label input,
			.boolean_widget li label input {
				float: none;
				margin-right: 0.5em;
			}

			/* Right Aligned */
			.form_rightaligned .field label,
			.form_rightaligned .field .label {
				text-align: right;
			}
			.form_rightaligned .field .optional,
			.form_rightaligned .introduction .optional {
				display: block;
			}

			/* Top Aligned */
			.form_topaligned .field label,
			.form_topaligned .field .label,
			.form_topaligned .textarea label,
			.form_topaligned .textarea .label {
				display: block;
				float: none;
				line-height: 120%;
				margin-right: 0;
				padding-bottom: 0.15em;
				width: 100%;
			}
			.form_topaligned .field .help {
				margin-left: 0;
			}
			.form_topaligned .field {
				margin: 0;
				padding: 0 0 0.375em 0;
			}
			.form_topaligned .dropdown {
				margin-bottom: 0.7em;
			}
			.form_topaligned .field .help,
			.form_topaligned .textarea .help {
				margin: 0;
				padding-top: 0.3em;
			}
			.form_topaligned .button,
			.form_topaligned input.button {
				margin-left: 0;
			}

			/* Specific Cases */
			.checklist_column {
				float: left;
				margin-bottom: 1em;
				width: 140px;
			}
			.checklist_item {
				display: block;
				padding-bottom: 5px;
			}
			.form_topaligned .checklist_column .checklist_item label {
				display: inline;
				vertical-align: middle;
			}
			.form_topaligned .checklist_column .checklist_item input {
				margin-right: 3px;
				vertical-align: middle;
			}

			/*
			-----------------------------------------------
			Main theme styles
			-----------------------------------------------
			/*

			/*
			1. GLOBAL STYLES
			------------------------------------------------------------------- */

			/* 1.0 Master/Reset
			----------------------------------------------- */
			html,legend{background: #fff; color:#777}
			address,blockquote,body,dd,del,dl,dt,div,fieldset,form,h1,h2,h3,h4,h5,h6,hr,html,iframe,input,ins,legend,li,map,object,ol,p,pre,table,td,textarea,th,ul{font-size:100%;margin:0;padding:0; vertical-align: baseline;}
			h1,h2,h3,h4,h5,h6,th{font-weight:normal}
			fieldset,img{border:0}
			input,select,textarea{font-family:inherit}
			table{border-collapse:collapse;border-spacing:0}
			caption,th{text-align:left}
			td,th{vertical-align:top}
			abbr,acronym,address,b,caption,cite,code,dfn,em,i,input,samp,select,strong,textarea,var{border:0;font-family:inherit;font-style:normal;font-variant:normal}
			del,ins{text-decoration:none}
			sup{vertical-align:text-top}
			sub{vertical-align:text-bottom}
			q{quotes:none}q:before{content:"\2018"}q:after{content:"\2019"}q q:before{content:"\201c"}q q:after{content:"\201d"}
			em{font-style:italic;}

			body {
				border-top: 6px solid #333;
				font: normal 14px/1.57em "Lucida Grande","Lucida Sans","Lucida Sans Unicode","Helvetica Neue",Arial,Helvetica,sans-serif;
			}
			#grid {
				/* Thanks to the guys at Analog for the Hashgrid — http://hashgrid.com/ */
				left: 50%;
				margin-left: -470px;
				position: absolute;
				top: 0;
				width: 941px;
			}
			#grid .horiz {
				/* 22px line height */
				border-bottom: 1px dotted #aaa;
				height: 21px;
				margin: 0;
				padding: 0;
			}
			/* 
			#grid {
				z-index: 0;
			}
			*/
			/* 1.1 Accessibility
			----------------------------------------------- */
			.accessibility {display: none;}
			#access {position: absolute; top: -1000em;}


			/* 1.2 Headings
			----------------------------------------------- */
			h1,
			h2,
			h3,
			h4,
			h5 {
				color: #999;
				font-family: "Helvetica Neue",Arial,Helvetica,sans-serif;
				font-weight: bold;
				line-height: 120%;
				margin-bottom: 0.15em;
				filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src=hIEfix.png,sizingMethod=crop);
				zoom: 1;
			}
			h1 {
				font-size: 34px;
				letter-spacing: -0.02em;
				margin: 29px 0 -5px 0;
			}
			h2 {
				font-size: 24px;
				letter-spacing: -0.02em;
			}
			h3 {
				font-size: 20px;
			}
			h4 {
				font-size: 20px;
			}
			h5 {
				font-size: 17px;
			}
			.page_title {
				color: #bbb;
				font-size: 1.8em;
				margin-left: 160px;
				margin-top: 0;
			}
			h1 .subtitle,
			h2 .subtitle,
			h3 .subtitle {
				color: #bbb;
				font: italic 0.615em/1.38em "Palatino","Times New Roman",Times,serif;
			}
			h1 a:hover .subtitle,
			h2 a:hover .subtitle,
			h3 a:hover .subtitle {
				color: #999;
			}

			/* 1.3 Text Elements
			--------------------------------------------- */
			p,
			.main ul,
			.main ol,
			ol.posts > li,
			pre {
				margin-bottom: 1.575em;
			}
			.main .posts ul li,
			.main .posts ol li {
				margin-bottom: 0.5em;
			}
			code {
				font: normal 1em "Monaco","Courier New",Courier,sans-serif;
				margin: 0;
				padding: 0;
			}
			blockquote,
			.blockquote {
				color: #9B9B9B;
				font: italic 1.2em/1.31em "Palatino","Times New Roman",Times,serif;
				margin: 0 auto;
				padding: 0	;
			}
			.blockquote.short {
				font-size: 26px;
			}
			.blockquote.long {
				font-size: 18px;
			}
			.cite {
				color: #999;
				font: normal 12px/12px "Helvetica Neue",Arial,Helvetica,sans-serif;
				margin-bottom: 10px
			}
			.cite a,
			.cite a:visited {
				color: #888;
			}
			.ampersand {
				font: italic 130% Baskerville,"Goudy Old Style","Palatino","Book Antiqua",serif;
			}

			/* 1.4 Links and Lists
			----------------------------------------------- */
			a,
			a:visited,
			.main .pagination a,
			.main .pagination a:visited {
				color: #333;
				font-weight: bold;
				text-decoration: none;
			}
			a:hover,
			a:focus,
			a:active,
			.main a:visited:hover {color: #2FAED6;}
			a:active {
				outline: 0;
				position: relative;
				top: 1px;
				text-decoration: none;
				text-shadow: 0 0 2px #999;
			}
			li {
				display: list-item;
			}
			ol li {
				list-style: decimal outside;
			}
			ul li {
				list-style: disc outside;
			}
			dl {
				margin-top: 22px;
			}
			dd {
				margin-bottom: 22px;
			}
			.notes li {
				list-style: none;
				margin-bottom: 0.5em;
			}


			/* 1.5 Forms
			----------------------------------------------- */
			form .field input,
			form .textarea textarea,
			form .select select,
			input[type="text"],
			input[type="textarea"],
			.tags li a {
				-moz-border-radius: 2px;
				-webkit-border-radius: 2px;
				border-radius: 2px;
			}
			input:focus {
				border: 1px solid #444;
			}
			form label {
				font-weight: bold;
			}
			.form_topaligned .field {
				padding: 0 0 9px 0;
				position: relative;
			}
			.field.error input,
			.select.error select,
			.textarea.error textarea {
				-moz-box-shadow: 0 0 3px #888;
				-webkit-box-shadow: 0 0 3px #888;
				box-shadow: 0 0 3px #888;
			}
			.form_topaligned .field label,
			.form_topaligned .field .label,
			.form_topaligned .textarea label,
			.form_topaligned .textarea .label {
				width: auto;
			}
			#respond .error input,
			#respond .error textarea {
				opacity: 1;
			}


			/* 1.6 Columns and Rows
			----------------------------------------------- */
			.column {
				display: inline;
				float: left;
				margin: 0 20px 20px 0;
				position: relative;
				width: 205px;
			}
			.column.last {
				border-right: 0;
				margin-right: 0;
			}
			.row .column {
				margin-bottom: 0;
			}
			.column.half {
				width: 470px;
			}
			.column.quarter {
				width: 225px;
			}
			.column.last {
				margin-right: 0;
			}
			.row {
				display: block;
				float: left;
				margin: 0 0 20px 0;
			}
			.row.last {
				border-bottom: 0;
				margin-bottom: 0;
				padding-bottom: 0;
			}


			/* 1.7 Puffs and Boxes
			----------------------------------------------- */
			.puff {
				border: 0;
				display: inline;
				padding: 0;
			}
			.puff.right {
				float: right;
				margin: 0 0 10px 20px;
			}
			.puff.left {
				float: left;
				margin: 0 20px 10px 0;
			}


			/* 1.8 Buttons
			----------------------------------------------- */
			button,
			form input.button,
			.submit input,
			.button,
			input[type="submit"],
			.prev_next a,
			.rss_link {
				background: #27CDF7;
				border: 0;
				-moz-border-radius: 2px;
				-webkit-border-radius: 2px;
				border-radius: 2px;
				color: #fff;
				cursor: pointer;
				font: bold 1em "Helvetica Neue",Arial,Helvetica,sans-serif;
				margin: 0;
				overflow: visible; /* overflow: visible + width: auto avoids IE adding double padding */
				padding: 3px 10px;
				text-align: center;
				width: auto;
			}
			button:hover,
			button:focus,
			button:active,
			form input.button:hover,
			form input.button:focus,
			form input.button:active,
			.submit input:hover,
			.submit input:focus,
			.submit input:active,
			.button:hover,
			.button:active,
			input[type="submit"]:hover,
			input[type="submit"]:focus,
			input[type="submit"]:active,
			.prev_next a:hover,
			.rss_link:hover {
				background: #80EAFF;
				color: #fff;
				text-decoration: none;
			}
			.prev_next a,
			.utility_links li a,
			.button {
				-moz-border-radius: 2px;
				-webkit-border-radius: 2px;
				border-radius: 2px;
			}
			.form_topaligned .button,
			.form_topaligned input.button {
				padding-left: auto;
			}
			form button,
			form .button {
				margin-top: 1em;
			}

			/* 1.9 Tables
			----------------------------------------------- */
			table {
				line-height: 110%;
				margin: 0;
			}
			table th {
				font-size: 1.143em;
				font-weight: bold;
				padding-bottom: 20px;
			}
			table td {
				border-top: 1px solid red;
				padding: 0.245em 14px 0.245em 0;
			}
			table tbody {
				font-size: 13px;
			}
			table span {
				color: #585245;
				font-weight: bold;
			}
			table .alt {
				background: #fbfbfb;
			}
			.wp_syntax table {
				margin: 0;
			}
			table caption {
				color: #9B9B9B;
				font: italic 1em "Palatino","Times New Roman",Times,serif;
				margin: 3px 0 5px 0;
			}


			/* 1.10 Images
			----------------------------------------------- */
			.main img.alignright {
				display: inline;
				float: right;
			}
			.main img.alignleft {
				display: inline;
				float: left;
			}
			.main img.size-large { /* 540px wide */

			}
			.main img.size-medium { /* 460px wide */

			}
			.main img.alignright{
				margin: -5px -240px 20px 20px;
			}
			.main img.alignleft {
				margin: -5px 20px 20px -160px;
			}
			.main img.alignright {
				margin: -5px -160px 20px 20px;
			}


			/*
			2. TOP LEVEL ELEMENTS
			------------------------------------------------------------------- */

			/* 2.0 Wrapper
			----------------------------------------------- */
			#wrapper:after {
				content: ".";
				clear: both;  
				display: block; 
				height: 0; 
				visibility: hidden;
			}
			#wrapper {
				display: inline-block;
			}
			/* \*/
			* html #wrapper {
				height: 1%;
			}
			#wrapper {
				display: block;
				margin: 0 auto;
				padding: 16px 10px 30px 10px;
				position: relative;
				width: 940px;
			}
			a.rss_link,
			a.rss_link:visited {
				background-position: 4px 3px;
				-moz-border-radius-bottomright: 2px;
				-moz-border-radius-bottomleft: 2px;
				-webkit-border-bottom-right-radius: 2px;
				-webkit-border-bottom-left-radius: 2px;
				border-bottom-right-radius: 2px;
				border-bottom-left-radius: 2px;
				color: #ddd;
				font: bold 0.875em "Helvetica Neue",Arial,Helvetica,sans-serif;
				padding: 3px 6px 4px 26px;
				position: absolute;
				right: 9px;
				text-align: right;
				top: -3px;
			}
			a.rss_link:hover {
				box-shadow: none;
				-moz-box-shadow: none;
				-webkit-box-shadow: none;
				color: #fff;
			}


			/* 2.1 Header
			----------------------------------------------- */
			#header {
				float: left;
				min-height: 70px;
				margin-bottom: 30px;
				position: relative;
				width: 100%;
			}
			#branding {
				display: inline;
				float: left;
				font-size: 1em;
				margin: 3px 20px 0 0;
				padding: 0;
				width: 140px;
			}
			#branding a,
			#branding a:visited {
				color: #2F9AD6;
				display: block;
				outline: 0;
			}
			.about {
				display: inline;
				float: right;
				font-size: 0.938em;
				height: 90px;
				overflow: hidden;
				width: 220px;
			}
			.about p {
				line-height: 22px;
				margin-bottom: 0;
			}
			.about img {
				border: 4px solid #DDDDDD;
				display: inline;
				float: left;
				margin-left: -82px;
				margin-right: 10px;
			}

			/* 2.2 Masthead
			----------------------------------------------- */
			#masthead {}


			/* 2.3 Navigation
			----------------------------------------------- */
			.navigation {
				float: left;
				font: bold 0.938em "Helvetica Neue",Arial,Helvetica,sans-serif;
				margin-top: 0;
				padding: 0;
				text-align: left;
				width: 140px;
			}
			.navigation li {
				line-height: 21px;
				list-style: none;
				padding: 0;
				width: 140px;
			}
			#nav li#nav_port {
				margin-bottom: 0;
			}
			#nav li#nav_serv {
				margin-bottom: 2px;
			}
			#nav li#nav_cont {
				margin-bottom: 0;
			}
			.nav li a {
				height: 18px;
				padding: 4px 10px 4px 0;
			}
			.nav li a:hover {
				background: none;
				color: #D53C2E;
			}
			.nav li a.active {
				background: #333;
				-moz-border-radius: 2px;
				-webkit-border-radius: 2px;
				border-radius: 2px;
				color: #fff;
				margin: 3px 0;
				padding: 2px 7px;
			}
			.nav li a.active:hover {
				background: #D53C2E;
				border: 0;
				color: #fff;
				margin: 0;
				padding: 2px 7px;
			}


			/* 2.4 Main content
			----------------------------------------------- */
			.main {
				display: inline;
				float: left;
				margin-right: 20px;
				margin: 0 20px 0 0;
				overflow: visible;
				padding-left: 160px;
				position: relative;
				width: 540px;
			}
			.main h2,
			.main h3,
			.main h4,
			.main h5 {
				margin-bottom: 0.2em;
			}
			.main h2 {
				padding-top: 0;
			}
			.main h3 {
				line-height: 1.08em;
				margin: 2px 0;
			}
			.main h4 {
				margin: -3px 0 -1px 0;
			}
			.main a {
				font-weight: bold;
			}
			.main a:visited {
				color: #bcbcbc;
			}
			.main a:visited:hover,
			.main .pagination a:hover {
				color: #2FAED6;
			}
			#sidebar {
				float: left;
				padding-top: 2px;
				width: 220px;
			}
			#searchform {
				margin-bottom: 3em;
				margin-top: -8px;
			}
			#searchform .field {
				margin: 0;
				padding: 0;
			}
			#searchform input {
				color: #666;
				font-size: 0.9em;
				padding: 4px;
				width: 140px;
			}
			#searchform button {
				font-size: 0.938em;
				margin-top: 0;
				padding: 4px 6px;
			}
			#tweets {
				font-size: 0.938em;
				margin-top: 0.5em;
			}
			#tweets li {
				border-bottom: 1px solid #ececec;
				line-height: 140%;
				list-style: none;
				margin-bottom: 0.75em;
				padding-bottom: 0.75em;
			}
			#tweets li,
			#tweets li a,
			#tweets li a:visited {
				color: #888;
			}
			#tweets li a:hover,
			#tweets li a:visited:hover {
				color: #2FAED6;
			}
			.main table {
				width: 100%;
			}
			.main img {
				box-shadow: 0 0 5px #999;
				-moz-box-shadow: 0 0 5px #999;
				-webkit-box-shadow: 0 0 5px #999;
				margin: 0;
			}
			.main a,
			.main a:link,
			.main a:visited {
				line-height: 98%;
			}
			.main ol {
				margin-bottom: 22px;
			}


			/* 2.5 Footer
			----------------------------------------------- */


			/*
			3. SPECIFIC MODULES
			------------------------------------------------------------------- */

			/* 3.0 Article/Post
			----------------------------------------------- */
			.article_header {
				background: none;
				border-bottom: 1px solid #ececec;
				clear: both;
				float: left;
				margin-bottom: 28px;
				/* overflow: auto; */
				padding-bottom: 9px;
				position: relative;
				width: 100%;
			}
			li.article_header {
				height: 55px;
				margin-bottom: 14px;
				padding-bottom: 9px;
			}
			li.article_header:last-child {
				border: 0;
			}
			h1.title {
				color: #2E4580;
				display: block;
				font-size: 30px;
				line-height: 120%;
				margin: -15px 0 0.3em 0;
			}
			h1 a,
			h1.title a,
			h2 a,
			h3 a {
				color: #4F6BA5;
			}
			h1 a:hover,
			h1 a:visited:hover,
			h1.title a:hover,
			h1.title a:visited:hover,
			h2 a:hover,
			h2 a:visited:hover,
			h3 a:hover,
			h3 a:visited:hover {
				color: #333;
			}
			.article_header .date {
				left: 0;
				position: absolute;
				top: 16px;
			}
			li.article_header .date {
				top: 17px;
			}
			ol.posts > li {
				float: left;
				left: -160px;
				list-style: none;
				position: relative;
				width: 700px;
			}
			.post_content {
				border-bottom: 1px solid #ececec;
				float: left;
				width: 540px;
			}
			.blog_nav,
			.post_info {
				-webkit-transition: opacity 0.30s linear;
			}
			.blog_nav h3 {
				color: #bbb;
				font-size: 1em;
				margin-bottom: 2px;
				margin-top: -2px;
			}
			.blog_nav ul {
				margin-bottom: 2em;
			}
			.about,
			.blog_nav ul,
			.blog_nav ol,
			.blog_nav p {
				color: #777;
				font-size: 0.929em;
				line-height: 160%;				
			}
			.blog_nav .credits {
				color: #bbb;
				font-size: 0.8em;
			}
			.blog_nav .credits a {
				color: #999;
				font-weight: normal;
			}
			.blog_nav ul.children {
				margin-bottom: 0;
			}
			.blog_nav li {
				list-style: none;
			}
			.blog_nav li a {
				font-weight: normal;
			}
			.prev_next {
				font: bold 0.938em "Helvetica Neue",Arial,Helvetica,sans-serif;
				margin-bottom: 30px;
			}
			.prev_next a {
				color: #fff;
				line-height: 100%;
				padding: 4px 10px;
				text-decoration: none;
			}
			.prev_next a:hover,
			.prev_next a.next:hover,
			.prev_next a.prev:hover {
				background: #80EAFF;
				color: #fff;
			}
			.prev_next .prev {
				padding-left: 13px;
			}
			.prev_next .next {
				padding-right: 11px;
			}
			.pagination a:active,
			.pagination a:focus {
				outline: 0;
			}
			.pagination .next {
				float: right;
				text-align: right;
				width: 40%;
			}
			.pagination .prev {
				float: left;
				width: 40%;
			}
			#aside {
				color: #999;
				float: left;
				font: bold 0.875em "Helvetica Neue",Arial,Helvetica,sans-serif;
				padding-right: 10px;
				padding-top: 10px;
				width: 150px;
			}
			#aside p {
				color: #bbb;
				margin-bottom: 0.5em;
			}
			span.date,
			p.date {
				color: #bbb;
				display: block;
				font: italic 120% "Palatino","Times New Roman",Times,serif;
				margin-bottom: 0.5em;
			}
			a:hover span.date,
			a:focus span.date {
				color: #969696;
			}
			.tags {
				margin-top: 1em;
			}
			.main .posts .tags li {
				list-style: none;
				margin-bottom: 0.8em;
			}
			.tags li a,
			.tags li a:visited {
				background: #27CDF7;
				color: #fff;
				padding: 3px 6px;
			}
			.tags li a:hover,
			.tags li a:visited:hover {
				color: #fff;
				background: #80EAFF;
				filter:alpha(opacity=1);
				-moz-opacity: 1;
				-khtml-opacity: 1;
				opacity: 1;
			}
			.standfirst {
				color: #bbb;
				font: italic 1.143em/1.38em "Palatino","Times New Roman",Times,serif;
				padding-top: 0.05em;
				width: 140px;
			}
			.standfirst p {
				margin-bottom: 1.36em;
			}
			.article_header .comments {
				background: #333;
				-moz-border-radius: 2px;
				-webkit-border-radius: 2px;
				border-radius: 2px;
				color: #fff;
				display: inline;
				float: right;
				font: bold 0.938em "Helvetica Neue",Arial,Helvetica,sans-serif;
				height: 24px;
				line-height: 15px;
				margin-right: 0;
				margin-top: 5px;
				position: absolute;
				right: 0;
				text-align: center;
				top: 4px;
				width: auto;
			}
			.article_header .comments a {
				color: #fff;
				display: block;
				padding: 4px 8px 10px;
				text-align: center;
			}
			.article_header .comments:hover,
			.article_header .comments:visited {
				background: #D53C2E;
				color: #fff;
			}
			.article_header .comments:active {
				margin-top: 6px;
			}
			.article_header .comments a:active {
			}
			.article_header .comments:hover a,
			.article_header .comments:hover a:hover {
				background-position: 7px -6px;
				top: 0;
			}

			#fs {
				background: none;
				border-top: 1px solid #ececec;
				clear: both;
				float: left;
				height: 100%;
				margin-top: 1.429em;
				padding-bottom: 1em;
				position: relative;
				width: 100%;
			}
			.post_info {
				font-size: 0.938em;
				margin-bottom: 18px;
			}
			.post_info p {
				margin-bottom: 0;
			}
			.main .post_info a:visited {
				color: #333;
			}
			.main .post_info a:hover {
				color: #D53C2E;
			}
			#comments {
				margin-top: 2.65em;
			}
			#comments h3 {
				margin: 26px 0 18px 0;
			}
			#respond {
				margin-top: 25px;
			}
			#respond form {
				margin-top: -0.143em;
				width: 100%;	
			}
			#respond label {
				font-weight: normal;
			}
			#respond h3 {
				margin-bottom: 1.23em;
			}
			#respond input,
			#respond textarea {
				filter:alpha(opacity=60);
				-moz-opacity: 0.60;
				-khtml-opacity: 0.60;
				opacity: 0.60;
				-webkit-transition: opacity 0.30s linear;
				position: relative;
			}
			#respond input {
				width: 50%;
			}
			#respond input:hover,
			#respond input:focus,
			#respond textarea:hover,
			#respond textarea:focus {
				-moz-box-shadow: 0 0 3px #ddd;
				-webkit-box-shadow: 0 0 3px #ddd;
				box-shadow: 0 0 4px #ddd;
				filter:alpha(opacity=100);
				-moz-opacity: 1;
				-khtml-opacity: 1;
				opacity: 1;
			}
			#respond textarea {
				height: 138px;
				line-height: 150%;
				width: 532px;
			}
			#respond .required_info {
				top: 3px;
			}
			#respond form button {
				margin-top: 7px;
			}
			.commentlist li {
				list-style: none;
				margin-bottom: 0;
			}
			.comment {
				background: none;
				border-top: 1px solid #ececec;
				margin-left: -20px;
				padding: 0 0 1.18em 20px;
				position: relative;
				width: 540px;
			}
			.comment.depth-2 {
				margin-left: 40px;
				width: 500px;
			}
			.comment_meta {
				background: #ececec;
				-moz-border-radius-bottomright: 2px;
				-moz-border-radius-bottomleft: 2px;
				-webkit-border-bottom-right-radius: 2px;
				-webkit-border-bottom-left-radius: 2px;
				border-bottom-right-radius: 2px;
				border-bottom-left-radius: 2px;
				font-size: 90%;
				line-height: 120%;
				padding: 2px 7px 3px;
				position: absolute;
				right: 0;
				text-shadow: none;
				top: 0;
			}
			.comment-author-admin .comment_meta,
			.bypostauthor .comment_meta {
				background: #333;
			}
			.comment cite.fn,
			.comment .commentmetadata {
				display: inline;
			}
			.comment cite.fn a {
				color: #333;
				font-weight: normal;
			}
			.comment .date {
				color: #aaa;
				margin: 0;
				width: auto;
			}
			.comment.comment-author-admin cite.fn,
			.comment.bypostauthor cite.fn {
				color: #aaa;
			}
			.comment.comment-author-admin .date,
			.comment.bypostauthor .date {
				color: #888;
			}
			.comment.comment-author-admin,
			.comment.bypostauthor {
				border-top: 1px solid #333;
			}
			.comment-edit-link {
				font-size: 0.857em;
			}
			.comment .avatar {
				box-shadow: none;
				-moz-box-shadow: none;
				-webkit-box-shadow: none;
				margin: -1px 4px -21px -64px;
				position: relative;
			}
			.comment-author .says {
				display: none;
			}
			.comment-author {
				line-height: 120%;
			}
			.wp-caption-text {
				display: none;
			}
			.comment_options {
				margin-bottom: 18px;
			}
			.subscribe-to-comments {
				margin-top: 1.4em;
			}
			#author-info {
				background: #000;
				-moz-border-radius: 6px;
				-webkit-border-radius: 6px;
				border-radius: 6px;
				color: #eee;
				font-size: 0.857em;
				height: 100%;
				margin: 0 0 28px 0;
				overflow: auto;
				padding: 12px 10px;
			}
			#author-info h4 {
				color: #fff;
				margin: 0;
			}
			#author-info p {
				color: #777;
				line-height: 171%;
			}
			#author-info p:last-child {
				margin-bottom: 0;
			}
			#author-info #author-image {
				float: left;
				height: 80px;
				margin: 0 10px 0 0;
				width: 80px;
			}
			#author-info #author-image img {
				border: 0;
				box-shadow: none;
				-moz-box-shadow: none;
				-webkit-box-shadow: none;
				margin: 0;
			}
			#author-info #author-bio {
				float: right;
				width: 430px;
			} 
			.post_teasers .teaser {
				clear: both;
				display: inline;
				float: left;
				list-style: none;
				margin-bottom: 31px;
				overflow: hidden;
				width: 100%;
			}
			.wp_syntax {
				margin-bottom: 28px !important;
			}


			/* 3.1 Article listing
			----------------------------------------------- */
			li.article_header .title {
				margin-right: 20px;
				width: 460px;
			}
			li.article_header .excerpt {
				display: inline;
				color: #999;
				float: left;
				line-height: 16px;
				width: 240px;
			}
			li.article_header .excerpt p {
				font: italic 1em/1.3em "Palatino","Times New Roman",Times,serif;
				margin-bottom: 0;
			}

			/* 3.2 Archive listing
			----------------------------------------------- */
			body.template_archive #header {
				margin-bottom: 29px;
			}
			body.template_archive .article_header {
				float: left;
				margin-bottom: 23px;
				overflow: hidden;
			}
			body.template_archive .article_header.title {
				border-bottom: 0;	
				margin-bottom: 24px;
			}
			body.template_archive .article_header:last-child {
				margin-bottom: 0;
			}

			body.template_archive .article_header .page_title {
				margin-top: 8px;
			}

			/* 3.3 Post-specific style amends
			----------------------------------------------- */
			.main img.bare {
				-moz-box-shadow: none;
				-webkit-box-shadow: none;
				box-shadow: none;
			}
			.main img.wp-image-321 { /* iPhone screenshots from 'Happy accident' */
				margin: -6px 0 0 0;
			}
			.postid-217 .main img,
			.page-id-17 .main img /* Homepage version */ {
				margin: 17px 0 1px 0;
			}
			.postid-217 .main .comment .avatar,
			.page-id-17 .main .comment .avatar {
				margin:-1px 4px -21px -64px;
			}
			.postid-217 .main img.alignleft,
			.page-id-17 .main img.alignleft /* Homepage version */  {
				margin: -5px 20px 20px -160px;
			}
			.postid-217 .main h2,
			.page-id-17 .main h2 {
				margin-top: -0.31em;
				padding-top: 0;
			}
			.page-id-17 .main img.wp-image-378,
			.postid-335 .main img.wp-image-378 /* Wireframes sketches in 'The importance of wireframes' */ {
				margin-right: -240px;
			}

			/* 3.4 Search results
			----------------------------------------------- */
			.search-results #header {
				height: 63px;
				margin-bottom: 0;
			}
			.search-results .page_title {
				margin-bottom: 0;
			}
			.search-results .article_header .title {
				margin-top: 4px;
			}
			.main .result_title {
				margin-bottom: 1em;
			}


			/* Webkit specific styles
			----------------------------------------------- */
			.webkit body {
				line-height: 1.6em;
			}
			.webkit h1,
			.webkit h2 {
				letter-spacing: -0.04em;
			}
			.webkit button {
				padding-bottom: 6px;
				padding-top: 6px;
			}
			.webkit .blog_nav h3 {
				margin-bottom: 3px;
			}
			.webkit li.article_header .title {
				margin-top: -22px;
			}
			.webkit li.article_header .excerpt {
				margin-top: -21px;
			}
			.webkit #searchform button {
				padding: 5px 9px;
			}
			.webkit #respond form button {
				margin-top: 0;
			}

			/*
			-----------------------------------------------
			CSS3 Icing
			-----------------------------------------------
			*/

			a,
			#nav .on a,
			button,
			form input.button,
			.submit input,
			.button,
			.prev_next a,
			.prev_next a.next,
			.prev_next a.prev,
			h1 a .subtitle,
			h2 a .subtitle,
			h3 a .subtitle,
			.article_header .comments {
				-o-transition-duration: .55s;
				-o-transition-property: color, background-color;
				-webkit-transition-duration: .55s;
				-webkit-transition-property: color, background-color;
			}
			.prev_next a:active,
			button:active,
			form input.button:active,
			.submit input:active,
			.tags li a:active {
				-moz-box-shadow: 0 0 3px #888;
				-webkit-box-shadow: 0 0 3px #888;
				box-shadow: 0 0 3px #888;
			}
            
            .tag:before, .search_query:before { content:'“'; }
        	.tag:after, .search_query:after { content:'”'; }
            
			
    </style>
    
    
    
  
<!-- BEGIN TUMBLR FACEBOOK OPENGRAPH TAGS -->
<!-- If you'd like to specify your own Open Graph tags, define the og:url and og:title tags in your theme's HTML. -->
<!-- Read more: http://ogp.me/ -->
<meta property="fb:app_id" content="48119224995">
<meta property="og:site_name" content="eighty-blog">
<meta property="og:title" content="Creating an Ajaxified Star Rating System in Rails 3">
<meta property="og:url" content="http://eighty-b.tumblr.com/post/1569674815/creating-an-ajaxified-star-rating-system-in-rails-3">
<meta property="og:description" content="On the app I’m currently working on I needed to create a star rating system. I searched around for different solutions, but everything I found either didn’t support Rails 3 or had very obtrusive...">
<meta property="og:determiner" content="a">
<meta property="og:type" content="tumblr-feed:entry">
<meta property="og:image" content="http://assets.tumblr.com/images/og/text_200.png">
<!-- END TUMBLR FACEBOOK OPENGRAPH TAGS -->


<!-- TWITTER TAGS -->
<meta charset="utf-8">
            <meta name="twitter:card" content="summary">
            <meta name="twitter:description" content="On the app I&amp;#8217;m currently working on I needed to create a star rating system. I searched around for different solutions, but everything I found either didn’t support Rails 3 or had very obtrusive javascript or both.

 I was able to figure this out on my own, however, and I thought it would be pretty useful to share this with anyone else who found themselves in a similar situation. I used HAML instead of ERB, which is absolutely a wonderful way to write view code, but you should be able to follow the presentation logic even if HAML is unfamiliar to you.

 Here’s the gist of what we&amp;#8217;re going to look at:

 Start by creating a Rating Model
 Associate that model with the users (who give ratings) and whatever model objects they&amp;#8217;re going to rate.
 Create the necessary forms.
 Setup your controllers to handle the forms.
 Refine the model to aggregate data.
 Ajaxify your form.
 Use CSS to make your form look right.
 Setup a jQuery function to handle interaction with your new form.
 It’s a little complicated, to be honest, but it’s not as bad as you might think. I&amp;#8217;ll cover each step in detail and show you my code along the way.

Create the Model

 The first thing we need to do is create the model. This is pretty straightforward. We&amp;#8217;re going to use a has_many :through relationship, so you just need to know the id of the two models you&amp;#8217;ll be linking (users and rated objects). In my case I was letting users rate the quality of different photographs, so in my examples I&amp;#8217;ll have a relationship between the User Model and the Photo model. You also have one piece of data for each rating, the actual rating value. Therefore, your generator should look like this:

rails generate model Rating user_id:string photo_id:string value:integer


 You probably don’t need to customize this at all, so go ahead and migrate the database.

rake db:migrate


Associate your models

 Now we need to declare the relationships between the various models. First of all, Ratings belong to both Users and Photos (or whatever you&amp;#8217;re rating). It belongs to photos, and it also belongs to users. For good measure, go ahead and protect all the attributes except the value (using attr_accesible).

rating.rb
class Rating &amp;lt; ActiveRecord::Base
    attr_accessible :value

    belongs_to :photo
    belongs_to :user

end


 Now, open up your User model. Your user has many ratings, and also has many photos that have been rated. It should look something like this:

user.rb
class User &amp;lt; ActiveRecord::Base
    has_many :ratings
    has_many :rated_photos, :through =&amp;gt; :ratings, :source =&amp;gt; :photos
end


 Finally, let’s edit the Photo model (or whatever you&amp;#8217;re rating). This will be basically the same as your user model.

photo.rb
class Photo &amp;lt; ActiveRecord::Base
    has_many :ratings
    has_many :raters, :through =&amp;gt; :ratings, :source =&amp;gt; :users
end


 There you go! Your relationships are now all declared.

Create a form

 You could do the next two steps in either order, but I think it’s easier to visualize what you&amp;#8217;re controller is supposed to be doing after you&amp;#8217;ve gotten your form working.

 The goal in creating the form is simple: you need to create a consistent markup pattern where you have labels attached to radio buttons. Why? Well, it turns out it’s pretty hard to change the visual style of radio buttons (or check boxes etc.), but you can basically do whatever you want with labels. This works out fine because as long as your label has a “for” element that matches the ID of one of your radio buttons, then clicking the label will result in selecting that radio button.

 What we&amp;#8217;re going to do is actually hide the “standard” form elements and use the labels to generate a custom form. We&amp;#8217;ll keep that in mind as we go, but we have to get the forms working first.

 The first decision you have to make is where you&amp;#8217;re going to put your star rating view. In my case I put it in the “photos#show” view. You may want to stick it somewhere else. Regardless of where you put it these instructions should still apply, but you may have to make some minor adjustments.

 The first problem you&amp;#8217;ll run into is right at the beginning of your code. You need to put in a form_for — but depending on whether or not your user has already rated this photo you need to either have a form for a new rating, or a form to update an existing rating. The best way to solve this dilemma is with a helper method.

Helper Method No. 1: Rating Ballot

 To simplify the rating form I created a helper method called rating_ballot. This helper method returns the object the form is modifying: either a new rating (if the current user has never rated this object before) or the user’s existing rating for this object.

 I&amp;#8217;ll assume that you&amp;#8217;re using some kind of authentication system, and that you have a current_user method that returns the current logged in user. If not, you&amp;#8217;ll need to either create that helper method or adapt these instructions to suit your application.

 The rating_ballot helper method is only used in Photo views, so I put it in the photos_helper.rb file. Here’s what it looks like:

photos_helper.rb
...
def rating_ballot
    if @rating = current_user.ratings.find_by_photo_id(params[:id])
        @rating
    else
        current_user.ratings.new
    end
end
...


 The method first checks to see if there is an existing rating from the current user on the photo that is being shown. If there is it returns that rating, if not it creates a new rating for the current user and returns that new rating.

 Note: This is not using the “create” method – therefore a rating is not created in the database when a user just views a photo, they have to actually commit a rating first.

Back to the Form

 Using this method we can build our form. It should look basically like this:

= form_for(rating_ballot, :html =&amp;gt; { :class =&amp;gt; 'rating_ballot' }) do |f|
    = f.label(&quot;value_1&quot;, content_tag(:span, '1'), {:class=&amp;gt;&quot;rating&quot;, :id=&amp;gt;&quot;1&quot;})
    = radio_button_tag(&quot;rating[value]&quot;, 1, current_user_rating == 1, :class =&amp;gt; 'rating_button')
    = f.label(&quot;value_2&quot;, content_tag(:span, '2'), {:class=&amp;gt;&quot;rating&quot;, :id=&amp;gt;&quot;2&quot;})
    = radio_button_tag(&quot;rating[value]&quot;, 2, current_user_rating == 2, :class =&amp;gt; 'rating_button')
    = f.label(&quot;value_3&quot;, content_tag(:span, '3'), {:class=&amp;gt;&quot;rating&quot;, :id=&amp;gt;&quot;3&quot;})
    = radio_button_tag(&quot;rating[value]&quot;, 3, current_user_rating == 3, :class =&amp;gt; 'rating_button')
    = f.label(&quot;value_4&quot;, content_tag(:span, '4'), {:class=&amp;gt;&quot;rating&quot;, :id=&amp;gt;&quot;4&quot;})
    = radio_button_tag(&quot;rating[value]&quot;, 4, current_user_rating == 4, :class =&amp;gt; 'rating_button')
    = f.label(&quot;value_5&quot;, content_tag(:span, '5'), {:class=&amp;gt;&quot;rating&quot;, :id=&amp;gt;&quot;5&quot;})
    = radio_button_tag(&quot;rating[value]&quot;, 5, current_user_rating == 5, :class =&amp;gt; 'rating_button')

    = hidden_field_tag(&quot;photo_id&quot;, @photo.id)
    = f.submit :Submit


 This is a slightly ghetto way of building a form, the label and “radiobuttontag” values are very ‘manual’, but this is actually simpler than any other approach I tried. Basically what this is doing is pre-defining a set of acceptable parameters that the user can input, in this case a rating from 1 to 5. Feel free to refactor this code if you want.

 Note two things:

  There’s a hidden field that is saving the photo id as a parameter. This is important because the form is going to end up in the Ratings Controller, not the photo controller, and the Ratings Controller isn’t going to know what photo you came from, nor will it be able to get the data from the URL (the form will be posting to a url like: “root/ratings/” or “root/ratings/2”). Putting this hidden field in there will save you a lot of headaches in your controller later on.
 In each radio_button_tag there’s a second helper method: current_user_rating. This argument in the radio button helper needs to evaluate either true or false. If it’s true the radio button is checked, and of course only one radio button can be checked at a time. The next step of this tutorial will look at that helper method and see what it’s doing.
Helper Method #2: Current User Rating

 So what’s the helper method doing? Quite simply we need a clean way to return the value of the current user’s rating for the photo that we&amp;#8217;re currently viewing. The nicest way to do this is to make a new helper method that looks like this:

photos_helper.rb
...
def current_user_rating
    if @rating = current_user.ratings.find_by_photo_id(params[:id])
        @rating.value
    else
        &quot;N/A&quot;
    end
end
...


 This is checking to see if the current user has already rated the photo that is being requested in the URL. If yes, then it returns the current user’s rating for that photo, if not then it returns the string “N/A”. The string will cause any test in the view to return false, and it also will render nicely if you want to put the numeric value of the current user’s rating somewhere on the page.

 With those helper methods in place our form render correctly. However, if you try it out in your view you&amp;#8217;ll get an exception: we don’t have the controller set up to handle the form yet. Let’s set that up.

Setting up the Controller

 The fastest way to do this is with the generator:

rails generate controller Ratings


 Now let’s add some logic to the controller. We&amp;#8217;ll need basically the same function for both the create and update methods: we need to prevent users from rating their own content (of course, you can omit that if you want people to vote on their own stuff), and we want to send users back to the view they came from when they submit a rating. Here’s what my controller looked like:

ratings_controller.rb
class RatingsController &amp;lt; ApplicationController
    before_filter :authenticate_user!

    def create
            @photo = Photo.find_by_id(params[:photo_id])
            if current_user.id == @photo.id
                redirect_to photo_path(@photo), :alert =&amp;gt; &quot;You cannot rate for your own photo&quot;
            else
                @rating = Rating.new(params[:rating])
                @rating.photo_id = @photo.id
                @rating.user_id = current_user.id
                if @rating.save
                    respond_to do |format|
                        format.html { redirect_to photo_path(@photo), :notice =&amp;gt; &quot;Your rating has been saved&quot; }
                        format.js
                    end
                end
            end
        end

        def update
            @photo = Photo.find_by_id(params[:photo_id])
            if current_user.id == @photo.id
                redirect_to photo_path(@photo), :alert =&amp;gt; &quot;You cannot rate for your own photo&quot;
            else
                @rating = current_user.ratings.find_by_photo_id(@photo.id)
                if @rating.update_attributes(params[:rating])
                    respond_to do |format|
                        format.html { redirect_to photo_path(@photo), :notice =&amp;gt; &quot;Your rating has been updated&quot; }
                        format.js
                    end
                end
            end
        end

    end


 This is pretty straightforward stuff, we&amp;#8217;re getting the current photo from the parameters, we&amp;#8217;re also getting the rating value that is passed through the parameters, and we&amp;#8217;re either creating a new rating or updating an existing one with this information. You&amp;#8217;ll notice the first declaration in this controller is before_filter :authenticate_user!. It’s a good idea to make sure that only signed-in users are rating things, so you should use whatever authentication solution your app has to accomplish this. I use the Devise plugin, but there are plenty of good options out there.

 You&amp;#8217;ll notice that, after saving the new rating or updating the existing rating, I&amp;#8217;ve got a respond block with options for both HTML and JS requests. This is because after we are sure the forms are working we&amp;#8217;re going to make them ajax-powered. When we do we&amp;#8217;ll need the format.js option in the code, so we might as well put it in there now.

 That ought to be enough to get a plain vanilla test of your rating system working. Try it out!

Refine the Model

 Now that you&amp;#8217;re getting a rating for each logged in user, you might want to also display the average rating that something has accumulated from many different users. The best way to do this is to create a new method in the model that you&amp;#8217;re rating — so, Photos in my case. I called my method average_rating, and it looks like this:

photo.rb
def average_rating
    @value = 0
    self.ratings.each do |rating|
        @value = @value + rating.value
    end
    @total = self.ratings.size
    @value.to_f / @total.to_f
end


 Now in your views you can show the average rating for your model with this simple method:

show.html.haml (or show.hrml.erb)
@photo.average_rating


 You could also show the numeric value of the user’s current rating with current_user_rating. Testing the next few steps is a bit easier if these values are showing, so stick them both in your view somewhere close to your form. I put them in my view with a little partial that looks like this:

%table#rating
    %thead
        %tr
            %th{ :colspan =&amp;gt; 2 }
                Photo Ratings
    %tr
        %td Average Rating
        %td= @photo.average_rating
    %tr
        %td Your Rating
        %td= current_user_rating


Ajax for your forms

 Ok, let’s make this a little spiffier. How about being able to update the rating without reloading the page? Well, this is actually pretty simple! You already informed the controller to respond to javascript, now just tell your form to use Ajax.

= form_for(rating_ballot, :remote =&amp;gt; true, :html =&amp;gt; { :class =&amp;gt; 'rating_ballot' }) do |f|


 If you have an element in your view that you want updated you should also add a “create.js.erb” and “update.js.erb” file to your “views/ratings” folder. Here’s what they should look like:

create.js.erb and update.js.erb
$('table#rating').replaceWith(&quot;&amp;lt;%= escape_javascript(render :partial =&amp;gt; 'photos/rating') %&amp;gt;&quot;);


 This jQuery command takes the existing table with an ID of “rating” and replaces it with the updated rating partial. The create and update files should be exactly the same.

 Now, this is pretty neat, but we could also make it even nicer for the end user if we could spare them the step of clicking on the “submit” button when they want to save their form. To do this we need to add a jQuery function to the page. I recommend not having this jQuery function on every page — only when it’s needed. So, if you don’t have something like this already, add a :yield to your header right after your main javascript_include_tag. It should look like this:

application.erb.haml
= javascript_include_tag 'jquery', 'jquery_ui', 'rails', 'application'
= yield :scripts


 Then go back to your form and stick this right above it:

- content_for(:scripts) do
    = javascript_include_tag 'rating_ballot'


 (again, please note that this is HAML, you have to adjust the markup for ERB if you prefer to use ERB)

 Now in your public/javascripts folder create a new file called rating_ballot.js. Inside it you should put something like this:

rating_ballot.js
$(document).ready(function() {
    // Submits the form (saves data) after user makes a change.
    $('form.rating_ballot').change(function() {
        $('form.rating_ballot').submit();
    });
});


 What this does is wait until the page is loaded (document ready function) and then looks for a form with a class of “rating_ballot”, and after any change is made to that form it submits the form — just like if you had clicked the submit button.

 NOTE: Do not use jQuery’s .click() method for updating forms. Oddly enough, this actually submits the value of the form as it was right before you clicked on it… it’s weird. The .change() method waits until after the change in your form has registered before submitting it.

 So, try this out again and you should see that your ratings update automatically when you click on the radio buttons, no more need to push submit! That’s actually good news, because we&amp;#8217;re about to kill the submit button!

Use CSS to Make Your Form Look Right

 Ok, now you have a radio-button powered rating system. That’s great, but it doesn’t look or feel like a star rating, and that’s what we&amp;#8217;re here for, isn’t it?

 To make it look like a star rating we&amp;#8217;re going to start by hiding the things that we don’t need — specifically, the things that we can’t style on our own. In your style.css file you should set “display:none” on the radio buttons and on the submit button. Your CSS should look something like this:

form.rating_ballot input#rating_submit { display: none; }
form.rating_ballot input.rating_button { display: none; }


 Now if you reload the view you&amp;#8217;ll just see the numbers 1,2,3,4 and 5, no more radio buttons and no more submit button. If you click on those numbers, however, you should still see the same interaction with the rating data as before. So now the trick is to make those numbers look like stars.

 First we need some stars to work with. I recommend some 20x20 transparent .png files, you can make them in just about any image editor, or probably find some on the web. You need images for stars that are “dim”, stars that are “bright” and stars that are “glowing”.

 Once you find or create some images put them in your public/images file. Then add the following lines to your css:

form.rating_ballot label.rating { cursor: pointer; display: block; height: 20px; width: 20px; float: left; }
form.rating_ballot label.rating span { display: none; }
form.rating_ballot label.rating { background-image: url(../images/star-dim.png); }
form.rating_ballot label.rating.bright { background-image: url(../images/star-bright.png); }
form.rating_ballot label.rating.glow { background-image: url(../images/star-glow.png); }


 The first line sets up your labels to be 20x20 blocks in a line, and tells the browser to use the pointer cursor when you hover over them. The second line hides the text. The last three lines define a background image for your labels.

 Now if you reload the page you should see a bunch of dim stars. The interaction should still work, but you won’t yet get a visual cue — the stars are still dim no matter when you click on them. At this point we&amp;#8217;re ready for the last layer of jQuery interactivity!

Setup a jQuery function to handle interaction with your new form.

 Let’s revisit your rating_ballot.js file. We need to add a bunch of stuff to it. First, let me show you what it will look like when we&amp;#8217;re done, then I&amp;#8217;ll explain each block of code.

rating_ballot.js
// Sets up the stars to match the data when the page is loaded.
$(function () {
    var checkedId = $('form.rating_ballot &amp;gt; input:checked').attr('id');
    $('form.rating_ballot &amp;gt; label[for=' + checkedId + ']').prevAll().andSelf().addClass('bright');
});

$(document).ready(function() {
    // Makes stars glow on hover.
    $('form.rating_ballot &amp;gt; label').hover(
        function() {    // mouseover
            $(this).prevAll().andSelf().addClass('glow');
        },function() {  // mouseout
            $(this).siblings().andSelf().removeClass('glow');
    });

    // Makes stars stay glowing after click.
    $('form.rating_ballot &amp;gt; label').click(function() {
        $(this).siblings().removeClass(&quot;bright&quot;);
        $(this).prevAll().andSelf().addClass(&quot;bright&quot;);
    });

    // Submits the form (saves data) after user makes a change.
    $('form.rating_ballot').change(function() {
        $('form.rating_ballot').submit();
    });
});


 Ok! To start we put a new function that’s outside the document.ready event. This function runs first, immediately as the page loads, and it does two things. First, it finds the ID of the checked radio button inside your “rating_ballot” form and stores this as “checkedId”. Second, it finds the label for that radio button, and adds the class “bright” to that label and all the ones that come before it.

 Inside the document ready function we have two new things going on. First we handle the hover condition. The mouseover portion of the hover function takes the label you&amp;#8217;re hover over and all the ones in front of it and adds the “glow” class to them. The mouseout function removes the “glow” class from all the labels.

 Secondly we handle the click event. After any label is clicked the “bright” class is wiped off of all the labels, then the label that was clicked and all the labels that come before it have the “bright” class added. This happens in an instant, so you just see it as the stars that are lit shifting to stop at whatever one you clicked.

 Save this, reload your page, and everything should work!

Wrap Up!

 So that’s all there is to it! This was a pretty lengthy tutorial, but I hope it has shown you several helpful ideas. There’s a lot of cool stuff you can do with forms once you know how to link the labels to the form elements and use jQuery and CSS to interact with the labels.

 I&amp;#8217;ll try to answer questions if you have some!">
            <meta name="twitter:title" content="Creating an Ajaxified Star Rating System in Rails 3">
            <meta name="twitter:url" content="http://eighty-b.tumblr.com/post/1569674815/creating-an-ajaxified-star-rating-system-in-rails-3">
            <meta name="twitter:site" content="tumblr">
            <meta name="twitter:app:name:iphone" content="Tumblr">
            <meta name="twitter:app:name:ipad" content="Tumblr">
            <meta name="twitter:app:name:googleplay" content="Tumblr">
            <meta name="twitter:app:id:iphone" content="305343404">
            <meta name="twitter:app:id:ipad" content="305343404">
            <meta name="twitter:app:id:googleplay" content="com.tumblr">
            <meta name="twitter:app:url:iphone" content="tumblr://x-callback-url/blog?blogName=eighty-b&amp;postID=1569674815&amp;referrer=twitter-cards">
            <meta name="twitter:app:url:ipad" content="tumblr://x-callback-url/blog?blogName=eighty-b&amp;postID=1569674815&amp;referrer=twitter-cards">
            <meta name="twitter:app:url:googleplay" content="tumblr://x-callback-url/blog?blogName=eighty-b&amp;postID=1569674815&amp;referrer=twitter-cards">
    

<script type="text/javascript" src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/tumblelog.js"></script><meta http-equiv="x-dns-prefetch-control" content="off">
<meta name="keywords" content="ajax,jquery,rails3,rails,ruby">

</head>
  
  <body id="1569674815" class="">
		<div id="outer_wrapper">
	    <div id="wrapper">
	      <div id="header">
					<h1 id="branding"><a href="http://eighty-b.tumblr.com/">eighty-blog</a></h1>
					<ul id="nav" class="navigation">
						<li><a href="http://eighty-b.tumblr.com/">Home</a></li>
						<li><a href="http://eighty-b.tumblr.com/archive/">Archive</a></li>
						<li><a href="http://eighty-b.tumblr.com/rss">RSS</a></li>
						<li><a href="http://eighty-b.tumblr.com/mobile">Mobile</a></li>
	        </ul>
					
					<ul id="pages" class="navigation">
						
							
						
           
						
					</ul>
					
					<div class="about">
						<p><script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-7145365-4']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script></p>
					</div>
				</div>
				
				<div class="article_header">
					<div></div>
				</div>
				
				<div class="main">

            

					<ol class="posts">
						
						<li>
						
						<div id="aside">
							
							<a href="http://eighty-b.tumblr.com/post/1569674815/creating-an-ajaxified-star-rating-system-in-rails-3"><span class="date">14 November 2010</span></a>
							

							
		          <p><a href="http://eighty-b.tumblr.com/post/1569674815/creating-an-ajaxified-star-rating-system-in-rails-3">14 notes</a></p>
		          
		
							
			
		          
		
		          
		
							
							<ul class="tags">
								
								<li>
									<a href="http://eighty-b.tumblr.com/tagged/ruby">ruby</a>
								</li>
								
								<li>
									<a href="http://eighty-b.tumblr.com/tagged/rails">rails</a>
								</li>
								
								<li>
									<a href="http://eighty-b.tumblr.com/tagged/rails3">rails3</a>
								</li>
								
								<li>
									<a href="http://eighty-b.tumblr.com/tagged/jquery">jquery</a>
								</li>
								
								<li>
									<a href="http://eighty-b.tumblr.com/tagged/ajax">ajax</a>
								</li>
								
							</ul>
							
							
						</div>
		
	        	
						<div class="post_content">
		          <h1 class="title"><a href="http://eighty-b.tumblr.com/post/1569674815/creating-an-ajaxified-star-rating-system-in-rails-3">Creating an Ajaxified Star Rating System in Rails 3</a></h1>
		          <p style="regular_post_body"></p><p>On the app I’m currently
 working on I needed to create a star rating system. I searched around 
for different solutions, but everything I found either didn’t support 
Rails 3 or had very obtrusive javascript or both.</p>

<p>I was able to figure this out on my own, however, and I thought it 
would be pretty useful to share this with anyone else who found 
themselves in a similar situation. I used HAML instead of ERB, which is 
absolutely a wonderful way to write view code, but you should be able to
 follow the presentation logic even if HAML is unfamiliar to you.</p>

<p>Here’s the gist of what we’re going to look at:</p>

<ol><li>Start by creating a Rating Model</li>
<li>Associate that model with the users (who give ratings) and whatever model objects they’re going to rate.</li>
<li>Create the necessary forms.</li>
<li>Setup your controllers to handle the forms.</li>
<li>Refine the model to aggregate data.</li>
<li>Ajaxify your form.</li>
<li>Use CSS to make your form look right.</li>
<li>Setup a jQuery function to handle interaction with your new form.</li>
</ol><p>It’s a little complicated, to be honest, but it’s not as bad as 
you might think. I’ll cover each step in detail and show you my code 
along the way.</p>

<h3>Create the Model</h3>

<p>The first thing we need to do is create the model. This is pretty 
straightforward. We’re going to use a has_many :through relationship, so
 you just need to know the id of the two models you’ll be linking (users
 and rated objects). In my case I was letting users rate the quality of 
different photographs, so in my examples I’ll have a relationship 
between the User Model and the Photo model. You also have one piece of 
data for each rating, the actual rating value. Therefore, your generator
 should look like this:</p>

<pre><code>rails generate model Rating user_id:string photo_id:string value:integer
</code></pre>

<p>You probably don’t need to customize this at all, so go ahead and migrate the database.</p>

<pre><code>rake db:migrate
</code></pre>

<h3>Associate your models</h3>

<p>Now we need to declare the relationships between the various models. 
First of all, Ratings belong to both Users and Photos (or whatever 
you’re rating). It belongs to photos, and it also belongs to users. For 
good measure, go ahead and protect all the attributes except the value 
(using attr_accesible).</p>

<pre><code>rating.rb
class Rating &lt; ActiveRecord::Base
    attr_accessible :value

    belongs_to :photo
    belongs_to :user

end
</code></pre>

<p>Now, open up your User model. Your user has many ratings, and also 
has many photos that have been rated. It should look something like 
this:</p>

<pre><code>user.rb
class User &lt; ActiveRecord::Base
    has_many :ratings
    has_many :rated_photos, :through =&gt; :ratings, :source =&gt; :photos
end
</code></pre>

<p>Finally, let’s edit the Photo model (or whatever you’re rating). This will be basically the same as your user model.</p>

<pre><code>photo.rb
class Photo &lt; ActiveRecord::Base
    has_many :ratings
    has_many :raters, :through =&gt; :ratings, :source =&gt; :users
end
</code></pre>

<p>There you go! Your relationships are now all declared.</p>

<h3>Create a form</h3>

<p>You could do the next two steps in either order, but I think it’s 
easier to visualize what you’re controller is supposed to be doing after
 you’ve gotten your form working.</p>

<p>The goal in creating the form is simple: you need to create a 
consistent markup pattern where you have labels attached to radio 
buttons. Why? Well, it turns out it’s pretty hard to change the visual 
style of radio buttons (or check boxes etc.), but you can basically do 
whatever you want with labels. This works out fine because as long as 
your label has a “for” element that matches the ID of one of your radio 
buttons, then clicking the label will result in selecting that radio 
button.</p>

<p>What we’re going to do is actually hide the “standard” form elements 
and use the labels to generate a custom form. We’ll keep that in mind as
 we go, but we have to get the forms working first.</p>

<p>The first decision you have to make is where you’re going to put your
 star rating view. In my case I put it in the “photos#show” view. You 
may want to stick it somewhere else. Regardless of where you put it 
these instructions should still apply, but you may have to make some 
minor adjustments.</p>

<p>The first problem you’ll run into is right at the beginning of your code. You need to put in a <code>form_for</code>
 — but depending on whether or not your user has already rated this 
photo you need to either have a form for a new rating, or a form to 
update an existing rating. The best way to solve this dilemma is with a 
helper method.</p>

<h4>Helper Method No. 1: Rating Ballot</h4>

<p>To simplify the rating form I created a helper method called <code>rating_ballot</code>.
 This helper method returns the object the form is modifying: either a 
new rating (if the current user has never rated this object before) or 
the user’s existing rating for this object.</p>

<p>I’ll assume that you’re using some kind of authentication system, and that you have a <code>current_user</code>
 method that returns the current logged in user. If not, you’ll need to 
either create that helper method or adapt these instructions to suit 
your application.</p>

<p>The <code>rating_ballot</code> helper method is only used in Photo views, so I put it in the <code>photos_helper.rb</code> file. Here’s what it looks like:</p>

<pre><code>photos_helper.rb
...
def rating_ballot
    if @rating = current_user.ratings.find_by_photo_id(params[:id])
        @rating
    else
        current_user.ratings.new
    end
end
...
</code></pre>

<p>The method first checks to see if there is an existing rating from 
the current user on the photo that is being shown. If there is it 
returns that rating, if not it creates a new rating for the current user
 and returns that new rating.</p>

<p><strong>Note: This is not using the “create” method – therefore a 
rating is not created in the database when a user just views a photo, 
they have to actually commit a rating first.</strong></p>

<h4>Back to the Form</h4>

<p>Using this method we can build our form. It should look basically like this:</p>

<pre><code>= form_for(rating_ballot, :html =&gt; { :class =&gt; 'rating_ballot' }) do |f|
    = f.label("value_1", content_tag(:span, '1'), {:class=&gt;"rating", :id=&gt;"1"})
    = radio_button_tag("rating[value]", 1, current_user_rating == 1, :class =&gt; 'rating_button')
    = f.label("value_2", content_tag(:span, '2'), {:class=&gt;"rating", :id=&gt;"2"})
    = radio_button_tag("rating[value]", 2, current_user_rating == 2, :class =&gt; 'rating_button')
    = f.label("value_3", content_tag(:span, '3'), {:class=&gt;"rating", :id=&gt;"3"})
    = radio_button_tag("rating[value]", 3, current_user_rating == 3, :class =&gt; 'rating_button')
    = f.label("value_4", content_tag(:span, '4'), {:class=&gt;"rating", :id=&gt;"4"})
    = radio_button_tag("rating[value]", 4, current_user_rating == 4, :class =&gt; 'rating_button')
    = f.label("value_5", content_tag(:span, '5'), {:class=&gt;"rating", :id=&gt;"5"})
    = radio_button_tag("rating[value]", 5, current_user_rating == 5, :class =&gt; 'rating_button')

    = hidden_field_tag("photo_id", @photo.id)
    = f.submit :Submit
</code></pre>

<p>This is a slightly ghetto way of building a form, the label and “radio<em>button</em>tag”
 values are very ‘manual’, but this is actually simpler than any other 
approach I tried. Basically what this is doing is pre-defining a set of 
acceptable parameters that the user can input, in this case a rating 
from 1 to 5. Feel free to refactor this code if you want.</p>

<p>Note two things:</p>

<ol><li><p>There’s a hidden field that is saving the photo id as a 
parameter. This is important because the form is going to end up in the 
Ratings Controller, not the photo controller, and the Ratings Controller
 isn’t going to know what photo you came from, nor will it be able to 
get the data from the URL (the form will be posting to a url like: 
“root/ratings/” or “root/ratings/2”). Putting this hidden field in there
 will save you a lot of headaches in your controller later on.</p></li>
<li><p>In each <code>radio_button_tag</code> there’s a second helper method: <code>current_user_rating</code>.
 This argument in the radio button helper needs to evaluate either true 
or false. If it’s true the radio button is checked, and of course only 
one radio button can be checked at a time. The next step of this 
tutorial will look at that helper method and see what it’s doing.</p></li>
</ol><h4>Helper Method #2: Current User Rating</h4>

<p>So what’s the helper method doing? Quite simply we need a clean way 
to return the value of the current user’s rating for the photo that 
we’re currently viewing. The nicest way to do this is to make a new 
helper method that looks like this:</p>

<pre><code>photos_helper.rb
...
def current_user_rating
    if @rating = current_user.ratings.find_by_photo_id(params[:id])
        @rating.value
    else
        "N/A"
    end
end
...
</code></pre>

<p>This is checking to see if the current user has already rated the 
photo that is being requested in the URL. If yes, then it returns the 
current user’s rating for that photo, if not then it returns the string 
“N/A”. The string will cause any test in the view to return false, and 
it also will render nicely if you want to put the numeric value of the 
current user’s rating somewhere on the page.</p>

<p>With those helper methods in place our form render correctly. 
However, if you try it out in your view you’ll get an exception: we 
don’t have the controller set up to handle the form yet. Let’s set that 
up.</p>

<h3>Setting up the Controller</h3>

<p>The fastest way to do this is with the generator:</p>

<pre><code>rails generate controller Ratings
</code></pre>

<p>Now let’s add some logic to the controller. We’ll need basically the 
same function for both the create and update methods: we need to prevent
 users from rating their own content (of course, you can omit that if 
you want people to vote on their own stuff), and we want to send users 
back to the view they came from when they submit a rating. Here’s what 
my controller looked like:</p>

<pre><code>ratings_controller.rb
class RatingsController &lt; ApplicationController
    before_filter :authenticate_user!

    def create
            @photo = Photo.find_by_id(params[:photo_id])
            if current_user.id == @photo.id
                redirect_to photo_path(@photo), :alert =&gt; "You cannot rate for your own photo"
            else
                @rating = Rating.new(params[:rating])
                @rating.photo_id = @photo.id
                @rating.user_id = current_user.id
                if @rating.save
                    respond_to do |format|
                        format.html { redirect_to photo_path(@photo), :notice =&gt; "Your rating has been saved" }
                        format.js
                    end
                end
            end
        end

        def update
            @photo = Photo.find_by_id(params[:photo_id])
            if current_user.id == @photo.id
                redirect_to photo_path(@photo), :alert =&gt; "You cannot rate for your own photo"
            else
                @rating = current_user.ratings.find_by_photo_id(@photo.id)
                if @rating.update_attributes(params[:rating])
                    respond_to do |format|
                        format.html { redirect_to photo_path(@photo), :notice =&gt; "Your rating has been updated" }
                        format.js
                    end
                end
            end
        end

    end
</code></pre>

<p>This is pretty straightforward stuff, we’re getting the current photo
 from the parameters, we’re also getting the rating value that is passed
 through the parameters, and we’re either creating a new rating or 
updating an existing one with this information. You’ll notice the first 
declaration in this controller is <code>before_filter :authenticate_user!</code>.
 It’s a good idea to make sure that only signed-in users are rating 
things, so you should use whatever authentication solution your app has 
to accomplish this. I use the Devise plugin, but there are plenty of 
good options out there.</p>

<p>You’ll notice that, after saving the new rating or updating the 
existing rating, I’ve got a respond block with options for both HTML and
 JS requests. This is because after we are sure the forms are working 
we’re going to make them ajax-powered. When we do we’ll need the <code>format.js</code> option in the code, so we might as well put it in there now.</p>

<p>That ought to be enough to get a plain vanilla test of your rating system working. Try it out!</p>

<h3>Refine the Model</h3>

<p>Now that you’re getting a rating for each logged in user, you might 
want to also display the average rating that something has accumulated 
from many different users. The best way to do this is to create a new 
method in the model that you’re rating — so, Photos in my case. I called
 my method <code>average_rating</code>, and it looks like this:</p>

<pre><code>photo.rb
def average_rating
    @value = 0
    self.ratings.each do |rating|
        @value = @value + rating.value
    end
    @total = self.ratings.size
    @value.to_f / @total.to_f
end
</code></pre>

<p>Now in your views you can show the average rating for your model with this simple method:</p>

<pre><code>show.html.haml (or show.hrml.erb)
@photo.average_rating
</code></pre>

<p>You could also show the numeric value of the user’s current rating with <code>current_user_rating</code>.
 Testing the next few steps is a bit easier if these values are showing,
 so stick them both in your view somewhere close to your form. I put 
them in my view with a little partial that looks like this:</p>

<pre><code>%table#rating
    %thead
        %tr
            %th{ :colspan =&gt; 2 }
                Photo Ratings
    %tr
        %td Average Rating
        %td= @photo.average_rating
    %tr
        %td Your Rating
        %td= current_user_rating
</code></pre>

<h3>Ajax for your forms</h3>

<p>Ok, let’s make this a little spiffier. How about being able to update
 the rating without reloading the page? Well, this is actually pretty 
simple! You already informed the controller to respond to javascript, 
now just tell your form to use Ajax.</p>

<pre><code>= form_for(rating_ballot, :remote =&gt; true, :html =&gt; { :class =&gt; 'rating_ballot' }) do |f|
</code></pre>

<p>If you have an element in your view that you want updated you should 
also add a “create.js.erb” and “update.js.erb” file to your 
“views/ratings” folder. Here’s what they should look like:</p>

<pre><code>create.js.erb and update.js.erb
$('table#rating').replaceWith("&lt;%= escape_javascript(render :partial =&gt; 'photos/rating') %&gt;");
</code></pre>

<p>This jQuery command takes the existing table with an ID of “rating” 
and replaces it with the updated rating partial. The create and update 
files should be exactly the same.</p>

<p>Now, this is pretty neat, but we could also make it even nicer for 
the end user if we could spare them the step of clicking on the “submit”
 button when they want to save their form. To do this we need to add a 
jQuery function to the page. I recommend not having this jQuery function
 on every page — only when it’s needed. So, if you don’t have something 
like this already, add a <code>:yield</code> to your header right after your main <code>javascript_include_tag</code>. It should look like this:</p>

<pre><code>application.erb.haml
= javascript_include_tag 'jquery', 'jquery_ui', 'rails', 'application'
= yield :scripts
</code></pre>

<p>Then go back to your form and stick this right above it:</p>

<pre><code>- content_for(:scripts) do
    = javascript_include_tag 'rating_ballot'
</code></pre>

<p>(again, please note that this is HAML, you have to adjust the markup for ERB if you prefer to use ERB)</p>

<p>Now in your public/javascripts folder create a new file called <code>rating_ballot.js</code>. Inside it you should put something like this:</p>

<pre><code>rating_ballot.js
$(document).ready(function() {
    // Submits the form (saves data) after user makes a change.
    $('form.rating_ballot').change(function() {
        $('form.rating_ballot').submit();
    });
});
</code></pre>

<p>What this does is wait until the page is loaded (document ready 
function) and then looks for a form with a class of “rating_ballot”, and
 after any change is made to that form it submits the form — just like 
if you had clicked the submit button.</p>

<p><strong>NOTE:</strong> Do not use jQuery’s <code>.click()</code> 
method for updating forms. Oddly enough, this actually submits the value
 of the form as it was right before you clicked on it… it’s weird. The <code>.change()</code> method waits until after the change in your form has registered before submitting it.</p>

<p>So, try this out again and you should see that your ratings update 
automatically when you click on the radio buttons, no more need to push 
submit! That’s actually good news, because we’re about to kill the 
submit button!</p>

<h3>Use CSS to Make Your Form Look Right</h3>

<p>Ok, now you have a radio-button powered rating system. That’s great, but it doesn’t look or feel like a <em>star rating</em>, and that’s what we’re here for, isn’t it?</p>

<p>To make it look like a star rating we’re going to start by hiding the
 things that we don’t need — specifically, the things that we can’t 
style on our own. In your style.css file you should set “display:none” 
on the radio buttons and on the submit button. Your CSS should look 
something like this:</p>

<pre><code>form.rating_ballot input#rating_submit { display: none; }
form.rating_ballot input.rating_button { display: none; }
</code></pre>

<p>Now if you reload the view you’ll just see the numbers 1,2,3,4 and 5,
 no more radio buttons and no more submit button. If you click on those 
numbers, however, you should still see the same interaction with the 
rating data as before. So now the trick is to make those numbers look 
like stars.</p>

<p>First we need some stars to work with. I recommend some 20x20 
transparent .png files, you can make them in just about any image 
editor, or probably find some on the web. You need images for stars that
 are “dim”, stars that are “bright” and stars that are “glowing”.</p>

<p>Once you find or create some images put them in your public/images file. Then add the following lines to your css:</p>

<pre><code>form.rating_ballot label.rating { cursor: pointer; display: block; height: 20px; width: 20px; float: left; }
form.rating_ballot label.rating span { display: none; }
form.rating_ballot label.rating { background-image: url(../images/star-dim.png); }
form.rating_ballot label.rating.bright { background-image: url(../images/star-bright.png); }
form.rating_ballot label.rating.glow { background-image: url(../images/star-glow.png); }
</code></pre>

<p>The first line sets up your labels to be 20x20 blocks in a line, and 
tells the browser to use the pointer cursor when you hover over them. 
The second line hides the text. The last three lines define a background
 image for your labels.</p>

<p>Now if you reload the page you should see a bunch of dim stars. The 
interaction should still work, but you won’t yet get a visual cue — the 
stars are still dim no matter when you click on them. At this point 
we’re ready for the last layer of jQuery interactivity!</p>

<h3>Setup a jQuery function to handle interaction with your new form.</h3>

<p>Let’s revisit your <code>rating_ballot.js</code> file. We need to add
 a bunch of stuff to it. First, let me show you what it will look like 
when we’re done, then I’ll explain each block of code.</p>

<pre><code>rating_ballot.js
// Sets up the stars to match the data when the page is loaded.
$(function () {
    var checkedId = $('form.rating_ballot &gt; input:checked').attr('id');
    $('form.rating_ballot &gt; label[for=' + checkedId + ']').prevAll().andSelf().addClass('bright');
});

$(document).ready(function() {
    // Makes stars glow on hover.
    $('form.rating_ballot &gt; label').hover(
        function() {    // mouseover
            $(this).prevAll().andSelf().addClass('glow');
        },function() {  // mouseout
            $(this).siblings().andSelf().removeClass('glow');
    });

    // Makes stars stay glowing after click.
    $('form.rating_ballot &gt; label').click(function() {
        $(this).siblings().removeClass("bright");
        $(this).prevAll().andSelf().addClass("bright");
    });

    // Submits the form (saves data) after user makes a change.
    $('form.rating_ballot').change(function() {
        $('form.rating_ballot').submit();
    });
});
</code></pre>

<p>Ok! To start we put a new function that’s outside the document.ready 
event. This function runs first, immediately as the page loads, and it 
does two things. First, it finds the ID of the checked radio button 
inside your “rating_ballot” form and stores this as “checkedId”. Second,
 it finds the label for that radio button, and adds the class “bright” 
to that label and all the ones that come before it.</p>

<p>Inside the document ready function we have two new things going on. 
First we handle the hover condition. The mouseover portion of the hover 
function takes the label you’re hover over and all the ones in front of 
it and adds the “glow” class to them. The mouseout function removes the 
“glow” class from all the labels.</p>

<p>Secondly we handle the click event. After any label is clicked the 
“bright” class is wiped off of all the labels, then the label that was 
clicked and all the labels that come before it have the “bright” class 
added. This happens in an instant, so you just see it as the stars that 
are lit shifting to stop at whatever one you clicked.</p>

<p>Save this, reload your page, and everything should work!</p>

<h3>Wrap Up!</h3>

<p>So that’s all there is to it! This was a pretty lengthy tutorial, but
 I hope it has shown you several helpful ideas. There’s a lot of cool 
stuff you can do with forms once you know how to link the labels to the 
form elements and use jQuery and CSS to interact with the labels.</p>

<p>I’ll try to answer questions if you have some!</p><p></p>							
						</div>
		        

		        

		        

		        

		        

		        

		        

						</li>
	        	
					</ol>
					
					
					
					

	        
	
	        
	        <div class="post">
	          <h3>Notes</h3>
	          <p>
    
</p><ol class="notes">

    <!-- START NOTES -->
                            
        
                                                                
        
        
        <li class="note like tumblelog_jypepin without_commentary">

                                                                                <a rel="nofollow" class="avatar_frame" target="_blank" href="http://jypepin.tumblr.com/" title="Hi, I'm Jonathan :) "><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/avatar_988ae0439cfa_16.png" class="avatar " alt=""></a>
                
                <span class="action">
                    
                                            <a rel="nofollow" href="http://jypepin.tumblr.com/" title="Hi, I'm Jonathan :)">jypepin</a> likes this                                    </span>

                <div class="clear"></div>

                        
        </li>
                            
        
                                                                
        
        
        <li class="note reblog tumblelog_railsforbeginner without_commentary">

                        
                
                                                                                        <a rel="nofollow" class="avatar_frame" target="_blank" href="http://railsforbeginner.tumblr.com/" title="Untitled"><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/avatar_617436b3c008_16.png" class="avatar " alt=""></a>
                    
                    <span class="action" data-post-url="http://railsforbeginner.tumblr.com/post/22381889880">
                                                    
                                                                        
                                                                        
                                    <a rel="nofollow" href="http://railsforbeginner.tumblr.com/" class="tumblelog" title="Untitled">railsforbeginner</a> reblogged this from <a rel="nofollow" href="http://eighty-b.tumblr.com/" class="source_tumblelog" title="eighty-blog">eighty-b</a>
                                                                        
                                                                        
                                    </span>
                    <div class="clear"></div>

                                    
                        
        </li>
                            
        
                                                                
        
        
        <li class="note reblog tumblelog_jawadrashid without_commentary">

                        
                
                                                                                        <a rel="nofollow" class="avatar_frame" target="_blank" href="http://jawadrashid.tumblr.com/" title="Jawad Rashid Blog"><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/avatar_bdb877470899_16.png" class="avatar " alt=""></a>
                    
                    <span class="action" data-post-url="http://jawadrashid.tumblr.com/post/13676125116">
                                                    
                                                                        
                                                                        
                                    <a rel="nofollow" href="http://jawadrashid.tumblr.com/" class="tumblelog" title="Jawad Rashid Blog">jawadrashid</a> reblogged this from <a rel="nofollow" href="http://eighty-b.tumblr.com/" class="source_tumblelog" title="eighty-blog">eighty-b</a>
                                                                        
                                                                        
                                    </span>
                    <div class="clear"></div>

                                    
                        
        </li>
                            
        
                                                                
        
        
        <li class="note like tumblelog_jawadrashid without_commentary">

                                                                                <a rel="nofollow" class="avatar_frame" target="_blank" href="http://jawadrashid.tumblr.com/" title="Jawad Rashid Blog "><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/avatar_bdb877470899_16.png" class="avatar " alt=""></a>
                
                <span class="action">
                    
                                            <a rel="nofollow" href="http://jawadrashid.tumblr.com/" title="Jawad Rashid Blog">jawadrashid</a> likes this                                    </span>

                <div class="clear"></div>

                        
        </li>
                            
        
                                                                
        
        
        <li class="note like tumblelog_josephers without_commentary">

                                                                                <a rel="nofollow" class="avatar_frame" target="_blank" href="http://josephers.com/" title="Josephers "><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/avatar_1c1926fe2785_16.png" class="avatar " alt=""></a>
                
                <span class="action">
                    
                                            <a rel="nofollow" href="http://josephers.com/" title="Josephers">josephers</a> likes this                                    </span>

                <div class="clear"></div>

                        
        </li>
                            
        
                                                                
        
        
        <li class="note like tumblelog_artsicle-scott without_commentary">

                                                                                <a rel="nofollow" class="avatar_frame" target="_blank" href="http://artsicle-scott.tumblr.com/" title="Scott at Artsicle "><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/default_avatar_16.png" class="avatar " alt=""></a>
                
                <span class="action">
                    
                                            <a rel="nofollow" href="http://artsicle-scott.tumblr.com/" title="Scott at Artsicle">artsicle-scott</a> likes this                                    </span>

                <div class="clear"></div>

                        
        </li>
                            
        
                                                                
        
        
        <li class="note like tumblelog_fie without_commentary">

                                                                                <a rel="nofollow" class="avatar_frame" target="_blank" href="http://fie.tumblr.com/" title="Fie "><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/avatar_d100c06e786e_16.png" class="avatar " alt=""></a>
                
                <span class="action">
                    
                                            <a rel="nofollow" href="http://fie.tumblr.com/" title="Fie">fie</a> likes this                                    </span>

                <div class="clear"></div>

                        
        </li>
                            
        
                                                                
        
        
        <li class="note like tumblelog_mhenrixon without_commentary">

                                                                                <a rel="nofollow" class="avatar_frame" target="_blank" href="http://mhenrixon.tumblr.com/" title="Lifestream "><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/avatar_755c88b40328_16.png" class="avatar " alt=""></a>
                
                <span class="action">
                    
                                            <a rel="nofollow" href="http://mhenrixon.tumblr.com/" title="Lifestream">mhenrixon</a> likes this                                    </span>

                <div class="clear"></div>

                        
        </li>
                            
        
                                                                
        
        
        <li class="note like tumblelog_davidaskew without_commentary">

                                                                                <a rel="nofollow" class="avatar_frame" target="_blank" href="http://davidaskew.tumblr.com/" title="Cool Stuff "><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/default_avatar_16.png" class="avatar " alt=""></a>
                
                <span class="action">
                    
                                            <a rel="nofollow" href="http://davidaskew.tumblr.com/" title="Cool Stuff">davidaskew</a> likes this                                    </span>

                <div class="clear"></div>

                        
        </li>
                            
        
                                                                
        
        
        <li class="note reblog tumblelog_eighty-b original_post without_commentary">

                        
                
                                                                                        <a rel="nofollow" class="avatar_frame" target="_blank" href="http://eighty-b.tumblr.com/" title="eighty-blog"><img src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/avatar_664924eff237_16.png" class="avatar " alt=""></a>
                    
                    <span class="action" data-post-url="http://eighty-b.tumblr.com/post/1569674815">
                                                    
                                                            <a rel="nofollow" href="http://eighty-b.tumblr.com/" class="tumblelog" title="eighty-blog">eighty-b</a> posted this                                                                        </span>
                    <div class="clear"></div>

                                    
                        
        </li>
    
    
    <!-- END NOTES -->
</ol>

<p></p>
	        </div>
	        
        
	        
	        

	      </div>
	      
				<div id="sidebar">
					
					<div class="blog_nav">
						
						
	
	        
					<div class="prev_next">
						
		        <a rel="prev" href="http://eighty-b.tumblr.com/post/1568825222">« Prev</a>
		        
		        
		        <a rel="prev" href="http://eighty-b.tumblr.com/post/1568825222">Next »</a>
		        
	        </div>
					
	
					<form role="search" method="get" id="searchform" action="/search">
						<div class="field fld_name required input">
							<input name="q" type="text">
							<button id="searchsubmit" type="submit">Search</button>
						</div>
					</form>
					
					

					<h3>Elsewhere</h3>
					<ul class="social_links">
						
						
						
						
						
						
						
						
						
					</ul>
					
					<!-- Please do not remove the line below -->
					<p class="credits"><a href="http://www.robbiemanson.com/resources/vignelli-minimal-tumblr-theme/">Vignelli</a> theme by Robbie Manson</p>
				
					</div>
				
				</div>
	
	    </div>
    
	    
    
		</div>
  <!-- BEGIN TUMBLR CODE -->
        
    
        <iframe id="tumblr_controls" style="position: fixed; z-index: 2147483647; top: 0px; right: 0px; border: 0px none; background-color: transparent; overflow: hidden;" src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/p.htm" frameborder="0" height="36" scrolling="no" width="316"></iframe>    <div id="teaser_iframe_container" style="display:none;"><iframe src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/teaser.htm" id="teaser_iframe" frameborder="0" height="1" scrolling="no" width="1"></iframe></div>    
    <!--[if IE]><script type="text/javascript">document.getElementById('tumblr_controls').allowTransparency=true;</script><![endif]-->
    
    <!-- END TUMBLR CODE -->

<iframe src="eighty-blog%20-%20Ajaxified%20rating%20system-Dateien/analytics.htm" style="background-color:transparent; overflow:hidden; position:absolute; top:0; left:0 z-index:9999;" id="ga_target" frameborder="0" height="1" scrolling="no" width="1"></iframe>

    <script>
        var COMSCORE = true;
        window.setTimeout(function() {
            var analytics_frame = document.getElementById('ga_target');
            analytics_frame.contentWindow.postMessage('enable_comscore;' + window.location, analytics_frame.src.split('/analytics.html')[0]);
        }, 1000);
    </script>



    <script type="text/javascript">
      var _qevents = _qevents || [];

      (function() {
       var elem = document.createElement('script');

       elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
       elem.async = true;
       elem.type = "text/javascript";
       var scpt = document.getElementsByTagName('script')[0];
       scpt.parentNode.insertBefore(elem, scpt);
      })();
    </script>
    <script type="text/javascript">
        _qevents.push( { qacct: 'p-19UtqE8ngoZbM' } );
    </script>
    <noscript>
        <div style="display: none;"><img src="//pixel.quantserve.com/pixel/'p-19UtqE8ngoZbM'.gif" height="1" width="1" alt="Quantcast"/></div>
    </noscript>


    <script type="text/javascript">var s=new Image(1,1);s.src=((r='http://www.tumblr.com/impixu?T=1372017307&J=eyJ0eXBlIjoidXJsIiwidXJsIjoiaHR0cDpcL1wvZWlnaHR5LWIudHVtYmxyLmNvbVwvcG9zdFwvMTU2OTY3NDgxNVwvY3JlYXRpbmctYW4tYWpheGlmaWVkLXN0YXItcmF0aW5nLXN5c3RlbS1pbi1yYWlscy0zIiwicmVxdHlwZSI6MH0=&U=LPMIMHMFCA&K=e87694b19a03fa7bf77fc15c15a7dbc77a7939145a5c357a533ba6301edbdfc2&R='.replace(/&R=[^&$]*/,'')) + ('&R='+escape(document.referrer)).substr(0, 2000-r.length).replace(/%.?.?$/,''));</script><noscript><img style="position:absolute;z-index:-3334;top:0px;left:0px;visibility:hidden;" src="http://www.tumblr.com/impixu?T=1372017307&J=eyJ0eXBlIjoidXJsIiwidXJsIjoiaHR0cDpcL1wvZWlnaHR5LWIudHVtYmxyLmNvbVwvcG9zdFwvMTU2OTY3NDgxNVwvY3JlYXRpbmctYW4tYWpheGlmaWVkLXN0YXItcmF0aW5nLXN5c3RlbS1pbi1yYWlscy0zIiwicmVxdHlwZSI6MCwibm9zY3JpcHQiOjF9&U=LPMIMHMFCA&K=9c44b6d6901a9db976c06a258b338fb73c45e254626331124fe17ac19b5aac54&R="></noscript><script type="text/javascript">var s=new Image(1,1);s.src=((r='http://www.tumblr.com/impixu?T=1372017307&J=eyJ0eXBlIjoicG9zdCIsInVybCI6Imh0dHA6XC9cL2VpZ2h0eS1iLnR1bWJsci5jb21cL3Bvc3RcLzE1Njk2NzQ4MTVcL2NyZWF0aW5nLWFuLWFqYXhpZmllZC1zdGFyLXJhdGluZy1zeXN0ZW0taW4tcmFpbHMtMyIsInJlcXR5cGUiOjAsInBvc3RzIjpbeyJwb3N0aWQiOiIxNTY5Njc0ODE1IiwiYmxvZ2lkIjoiOTc0NjM0MiIsInNvdXJjZSI6MzN9XX0=&U=AJAOCKJEOA&K=f6df6f1e2c3cf6a737ae13b3007665f2a1ad75be6ad79a8e0073f1687266cff5&R='.replace(/&R=[^&$]*/,'')) + ('&R='+escape(document.referrer)).substr(0, 2000-r.length).replace(/%.?.?$/,''));</script><noscript><img style="position:absolute;z-index:-3334;top:0px;left:0px;visibility:hidden;" src="http://www.tumblr.com/impixu?T=1372017307&J=eyJ0eXBlIjoicG9zdCIsInVybCI6Imh0dHA6XC9cL2VpZ2h0eS1iLnR1bWJsci5jb21cL3Bvc3RcLzE1Njk2NzQ4MTVcL2NyZWF0aW5nLWFuLWFqYXhpZmllZC1zdGFyLXJhdGluZy1zeXN0ZW0taW4tcmFpbHMtMyIsInJlcXR5cGUiOjAsInBvc3RzIjpbeyJwb3N0aWQiOiIxNTY5Njc0ODE1IiwiYmxvZ2lkIjoiOTc0NjM0MiIsInNvdXJjZSI6MzN9XSwibm9zY3JpcHQiOjF9&U=AJAOCKJEOA&K=4a48eff429371fe45d76a8700cc2f86d7a9ffd88519c6b3d2b19ddedf450d50a&R="></noscript>
</body></html>